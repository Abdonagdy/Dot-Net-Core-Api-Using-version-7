// <auto-generated />
using System;
using DbContextL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DBContext.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20240716083314_i3")]
    partial class i3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<long>("ProductsId")
                        .HasColumnType("bigint");

                    b.HasKey("CategoriesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("CategoryProduct");
                });

            modelBuilder.Entity("Domian.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Domian.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Domian.AppointmentReversion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Maintaence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("braId")
                        .HasColumnType("bigint");

                    b.Property<bool>("isav")
                        .HasColumnType("bit");

                    b.Property<string>("revnumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tofromHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("braId");

                    b.ToTable("appointmentReversions");
                });

            modelBuilder.Entity("Domian.Artical", b =>
                {
                    b.Property<int>("ArticalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticalId"));

                    b.Property<string>("ArticalDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticalTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("SeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArticalId");

                    b.HasIndex("ProductId");

                    b.ToTable("articals");
                });

            modelBuilder.Entity("Domian.BranchService", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<string>("Descrption")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("BranchId");

                    b.ToTable("branchServices");
                });

            modelBuilder.Entity("Domian.Bransh", b =>
                {
                    b.Property<long>("brannum")
                        .HasColumnType("bigint");

                    b.Property<string>("Braname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Branickname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("From")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Madinaid")
                        .HasColumnType("int");

                    b.Property<int?>("Mantekaid")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("To")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("brannum");

                    b.HasIndex("Madinaid");

                    b.HasIndex("Mantekaid");

                    b.HasIndex("UserId");

                    b.ToTable("branshes");
                });

            modelBuilder.Entity("Domian.CarModelss", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("CarModelsses");
                });

            modelBuilder.Entity("Domian.CarNamesh", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("carModelid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("carModelid");

                    b.ToTable("carNameshes");
                });

            modelBuilder.Entity("Domian.CarService", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("carnameId")
                        .HasColumnType("int");

                    b.Property<int?>("disServiceId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("carnameId");

                    b.HasIndex("disServiceId");

                    b.ToTable("carServices");
                });

            modelBuilder.Entity("Domian.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("Domian.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ParentcategoryId")
                        .HasColumnType("int");

                    b.Property<string>("SeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentcategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Domian.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<int>("ArticalId")
                        .HasColumnType("int");

                    b.Property<string>("Commentt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Show")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommentId");

                    b.HasIndex("ArticalId");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("Domian.ConfirmSangan", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Car")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarNamesh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisstanceService")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Distance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelYearCar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Tax")
                        .HasColumnType("float");

                    b.Property<double?>("Totalprice")
                        .HasColumnType("float");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("confirmSangans");
                });

            modelBuilder.Entity("Domian.CuponCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Isavliable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("cuponCodes");
                });

            modelBuilder.Entity("Domian.Depend", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("IsDepend")
                        .HasColumnType("bit");

                    b.Property<int>("PrId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("PrId");

                    b.ToTable("depends");
                });

            modelBuilder.Entity("Domian.DependHomolla", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("IsDepend")
                        .HasColumnType("bit");

                    b.Property<int?>("PrId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("PrId");

                    b.ToTable("dependsHomolla");
                });

            modelBuilder.Entity("Domian.DisstanceService", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("DisstanceServices");
                });

            modelBuilder.Entity("Domian.Employee", b =>
                {
                    b.Property<long>("EmpNum")
                        .HasColumnType("bigint");

                    b.Property<string>("EmpName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("braId")
                        .HasColumnType("bigint");

                    b.HasKey("EmpNum");

                    b.HasIndex("braId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Domian.EngineType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("ModelYearCarid")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("ModelYearCarid");

                    b.ToTable("engineTypes");
                });

            modelBuilder.Entity("Domian.Homollamoward", b =>
                {
                    b.Property<string>("mordnum")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("mordname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("mordnum");

                    b.ToTable("mowardsHomolaa");
                });

            modelBuilder.Entity("Domian.Image", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("Domian.KemiaOrder", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("kem")
                        .HasColumnType("int");

                    b.Property<int>("mizeNum")
                        .HasColumnType("int");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<double>("res")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.HasIndex("mizeNum");

                    b.ToTable("kemies");
                });

            modelBuilder.Entity("Domian.KemiaOrderHomolla", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PurshesOrderid")
                        .HasColumnType("int");

                    b.Property<int?>("kem")
                        .HasColumnType("int");

                    b.Property<int?>("mizeNum")
                        .HasColumnType("int");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<double>("res")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.HasIndex("PurshesOrderid");

                    b.ToTable("kemiesHomolla");
                });

            modelBuilder.Entity("Domian.Madina", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Madinas");
                });

            modelBuilder.Entity("Domian.Manteka", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("manteka");
                });

            modelBuilder.Entity("Domian.ModelYearCar", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("YearNname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("carid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("carid");

                    b.ToTable("modelYearCars");
                });

            modelBuilder.Entity("Domian.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Branch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingStaus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShoppingMethodId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserPaymetMethodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ShoppingMethodId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserPaymetMethodId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Domian.OrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Domian.Points", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Collection")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("Domian.Price", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("CarServiceId")
                        .HasColumnType("int");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("id");

                    b.HasIndex("CarServiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("Domian.PriceConfirmShangan", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("CarServiceId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("id");

                    b.HasIndex("CarServiceId");

                    b.ToTable("priceConfirmShangans");
                });

            modelBuilder.Entity("Domian.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiscountPercentage")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("Quantitytop")
                        .HasColumnType("int");

                    b.Property<string>("SeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescriptionEN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Domian.PurseOrder", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CarName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CarNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientNumber")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Hekal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MordName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("paymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("mizePurs");
                });

            modelBuilder.Entity("Domian.PurseOrderHomalla", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CarName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CarNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientNumber")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Hekal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MordName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("paymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("mizePursHomolla");
                });

            modelBuilder.Entity("Domian.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Domian.QuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("ResponseId")
                        .HasColumnType("int");

                    b.Property<int?>("ResponseId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ResponseId");

                    b.HasIndex("ResponseId1");

                    b.ToTable("QuestionAnswers");
                });

            modelBuilder.Entity("Domian.ReferalUserCode", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("UserReralnew")
                        .HasColumnType("int");

                    b.Property<int?>("UserReralold")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("referalUserCodes");
                });

            modelBuilder.Entity("Domian.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Atenduce")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("EmpId")
                        .HasColumnType("bigint");

                    b.Property<string>("NameOfBran")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOfDept")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOfMonth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOfTec")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOfYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumOfCarReturn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signature2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Total")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("braId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EmpId");

                    b.HasIndex("braId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("Domian.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Domian.ServiceConfirmSangan", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("ConfirmSanganid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("ConfirmSanganid");

                    b.ToTable("serviceConfirmSangans");
                });

            modelBuilder.Entity("Domian.ShoppingMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BaseUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CallBackURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ShoppingMethod");
                });

            modelBuilder.Entity("Domian.Signage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SignageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("signages");
                });

            modelBuilder.Entity("Domian.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateAcount")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ReferralCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UrlReferralCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domian.UserAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAddress");
                });

            modelBuilder.Entity("Domian.UserPaymetMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ExpritDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPaymetMethod");
                });

            modelBuilder.Entity("Domian.UserReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProdcutId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<int?>("RatingValue")
                        .HasColumnType("int");

                    b.Property<int?>("userdId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProdcutId");

                    b.HasIndex("userdId");

                    b.ToTable("UserReview");
                });

            modelBuilder.Entity("Domian.WishList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("WishList");
                });

            modelBuilder.Entity("Domian.moward", b =>
                {
                    b.Property<string>("mordnum")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("mordname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("mordnum");

                    b.ToTable("mowards");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.HasOne("Domian.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domian.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domian.Answer", b =>
                {
                    b.HasOne("Domian.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Domian.AppointmentReversion", b =>
                {
                    b.HasOne("Domian.User", null)
                        .WithMany("appointmentReversions")
                        .HasForeignKey("UserId");

                    b.HasOne("Domian.Bransh", "Bransh")
                        .WithMany("appointmentReversions")
                        .HasForeignKey("braId");

                    b.Navigation("Bransh");
                });

            modelBuilder.Entity("Domian.Artical", b =>
                {
                    b.HasOne("Domian.Product", "Product")
                        .WithMany("Articals")
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domian.BranchService", b =>
                {
                    b.HasOne("Domian.Bransh", "Bransh")
                        .WithMany("branchServices")
                        .HasForeignKey("BranchId");

                    b.Navigation("Bransh");
                });

            modelBuilder.Entity("Domian.Bransh", b =>
                {
                    b.HasOne("Domian.Madina", null)
                        .WithMany("Madins")
                        .HasForeignKey("Madinaid");

                    b.HasOne("Domian.Manteka", null)
                        .WithMany("Branshes")
                        .HasForeignKey("Mantekaid");

                    b.HasOne("Domian.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domian.CarNamesh", b =>
                {
                    b.HasOne("Domian.CarModelss", "carModel")
                        .WithMany("CarName")
                        .HasForeignKey("carModelid");

                    b.Navigation("carModel");
                });

            modelBuilder.Entity("Domian.CarService", b =>
                {
                    b.HasOne("Domian.CarNamesh", "CarName")
                        .WithMany("carServices")
                        .HasForeignKey("carnameId");

                    b.HasOne("Domian.DisstanceService", "disService")
                        .WithMany("cars")
                        .HasForeignKey("disServiceId");

                    b.Navigation("CarName");

                    b.Navigation("disService");
                });

            modelBuilder.Entity("Domian.Cart", b =>
                {
                    b.HasOne("Domian.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domian.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domian.Category", b =>
                {
                    b.HasOne("Domian.Category", "Parentcategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentcategoryId");

                    b.Navigation("Parentcategory");
                });

            modelBuilder.Entity("Domian.Comment", b =>
                {
                    b.HasOne("Domian.Artical", "Artical")
                        .WithMany("Comments")
                        .HasForeignKey("ArticalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artical");
                });

            modelBuilder.Entity("Domian.Depend", b =>
                {
                    b.HasOne("Domian.PurseOrder", "PurseOrder")
                        .WithMany()
                        .HasForeignKey("PrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PurseOrder");
                });

            modelBuilder.Entity("Domian.DependHomolla", b =>
                {
                    b.HasOne("Domian.PurseOrderHomalla", "PurseOrder")
                        .WithMany()
                        .HasForeignKey("PrId");

                    b.Navigation("PurseOrder");
                });

            modelBuilder.Entity("Domian.Employee", b =>
                {
                    b.HasOne("Domian.Bransh", "Bransh")
                        .WithMany("Employees")
                        .HasForeignKey("braId");

                    b.Navigation("Bransh");
                });

            modelBuilder.Entity("Domian.EngineType", b =>
                {
                    b.HasOne("Domian.ModelYearCar", "ModelYearCar")
                        .WithMany("engine")
                        .HasForeignKey("ModelYearCarid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModelYearCar");
                });

            modelBuilder.Entity("Domian.Image", b =>
                {
                    b.HasOne("Domian.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domian.KemiaOrder", b =>
                {
                    b.HasOne("Domian.PurseOrder", "PurshesOrder")
                        .WithMany("kemiaOrders")
                        .HasForeignKey("mizeNum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PurshesOrder");
                });

            modelBuilder.Entity("Domian.KemiaOrderHomolla", b =>
                {
                    b.HasOne("Domian.PurseOrderHomalla", "PurshesOrder")
                        .WithMany("kemiaOrders")
                        .HasForeignKey("PurshesOrderid");

                    b.Navigation("PurshesOrder");
                });

            modelBuilder.Entity("Domian.ModelYearCar", b =>
                {
                    b.HasOne("Domian.CarNamesh", "carName")
                        .WithMany("modelYears")
                        .HasForeignKey("carid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("carName");
                });

            modelBuilder.Entity("Domian.Order", b =>
                {
                    b.HasOne("Domian.Address", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domian.ShoppingMethod", "ShoppingMethod")
                        .WithMany("Orders")
                        .HasForeignKey("ShoppingMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domian.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("Domian.UserPaymetMethod", null)
                        .WithMany("Orders")
                        .HasForeignKey("UserPaymetMethodId");

                    b.Navigation("Address");

                    b.Navigation("ShoppingMethod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domian.OrderDetails", b =>
                {
                    b.HasOne("Domian.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domian.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domian.Points", b =>
                {
                    b.HasOne("Domian.User", "user")
                        .WithMany("Points")
                        .HasForeignKey("UserId");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Domian.Price", b =>
                {
                    b.HasOne("Domian.CarService", "CarService")
                        .WithMany("Prices")
                        .HasForeignKey("CarServiceId");

                    b.HasOne("Domian.Product", null)
                        .WithMany("PriceList")
                        .HasForeignKey("ProductId");

                    b.Navigation("CarService");
                });

            modelBuilder.Entity("Domian.PriceConfirmShangan", b =>
                {
                    b.HasOne("Domian.ServiceConfirmSangan", "CarService")
                        .WithMany("Prices")
                        .HasForeignKey("CarServiceId");

                    b.Navigation("CarService");
                });

            modelBuilder.Entity("Domian.QuestionAnswer", b =>
                {
                    b.HasOne("Domian.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domian.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domian.Response", "Response")
                        .WithMany()
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domian.Response", null)
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("ResponseId1");

                    b.Navigation("Answer");

                    b.Navigation("Question");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("Domian.Response", b =>
                {
                    b.HasOne("Domian.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmpId");

                    b.HasOne("Domian.Bransh", "Bransh")
                        .WithMany()
                        .HasForeignKey("braId");

                    b.Navigation("Bransh");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Domian.ServiceConfirmSangan", b =>
                {
                    b.HasOne("Domian.ConfirmSangan", "ConfirmSangan")
                        .WithMany("SelectedServices")
                        .HasForeignKey("ConfirmSanganid");

                    b.Navigation("ConfirmSangan");
                });

            modelBuilder.Entity("Domian.UserAddress", b =>
                {
                    b.HasOne("Domian.Address", "Address")
                        .WithMany("UserAddresses")
                        .HasForeignKey("AddressId");

                    b.HasOne("Domian.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId");

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domian.UserPaymetMethod", b =>
                {
                    b.HasOne("Domian.User", "User")
                        .WithMany("UserPaymetMethods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domian.UserReview", b =>
                {
                    b.HasOne("Domian.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProdcutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domian.User", "User")
                        .WithMany("UserReviews")
                        .HasForeignKey("userdId");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domian.WishList", b =>
                {
                    b.HasOne("Domian.Product", "Product")
                        .WithMany("WishLists")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domian.User", "User")
                        .WithMany("WishLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Domian.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Domian.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Domian.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Domian.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domian.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Domian.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Domian.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domian.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domian.Address", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("UserAddresses");
                });

            modelBuilder.Entity("Domian.Artical", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Domian.Bransh", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("appointmentReversions");

                    b.Navigation("branchServices");
                });

            modelBuilder.Entity("Domian.CarModelss", b =>
                {
                    b.Navigation("CarName");
                });

            modelBuilder.Entity("Domian.CarNamesh", b =>
                {
                    b.Navigation("carServices");

                    b.Navigation("modelYears");
                });

            modelBuilder.Entity("Domian.CarService", b =>
                {
                    b.Navigation("Prices");
                });

            modelBuilder.Entity("Domian.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Domian.ConfirmSangan", b =>
                {
                    b.Navigation("SelectedServices");
                });

            modelBuilder.Entity("Domian.DisstanceService", b =>
                {
                    b.Navigation("cars");
                });

            modelBuilder.Entity("Domian.Madina", b =>
                {
                    b.Navigation("Madins");
                });

            modelBuilder.Entity("Domian.Manteka", b =>
                {
                    b.Navigation("Branshes");
                });

            modelBuilder.Entity("Domian.ModelYearCar", b =>
                {
                    b.Navigation("engine");
                });

            modelBuilder.Entity("Domian.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Domian.Product", b =>
                {
                    b.Navigation("Articals");

                    b.Navigation("PriceList");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("Domian.PurseOrder", b =>
                {
                    b.Navigation("kemiaOrders");
                });

            modelBuilder.Entity("Domian.PurseOrderHomalla", b =>
                {
                    b.Navigation("kemiaOrders");
                });

            modelBuilder.Entity("Domian.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Domian.Response", b =>
                {
                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("Domian.ServiceConfirmSangan", b =>
                {
                    b.Navigation("Prices");
                });

            modelBuilder.Entity("Domian.ShoppingMethod", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domian.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Points");

                    b.Navigation("UserAddresses");

                    b.Navigation("UserPaymetMethods");

                    b.Navigation("UserReviews");

                    b.Navigation("WishLists");

                    b.Navigation("appointmentReversions");
                });

            modelBuilder.Entity("Domian.UserPaymetMethod", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
